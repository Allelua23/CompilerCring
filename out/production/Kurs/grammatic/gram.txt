Набор выражений для основных лексем языка С:
1. keyword : \b(?:for|while|do|if|else|switch|case|default|break|continue|
goto|char|int|float|double|void|static|sizeof|return|enum|const)\b
2. id : [A-Za-z][A-Za-z0-9]*
3. real_number : [0-9]+\.[0-9]*
4. number : [0-9]+
5. string : '[^']*'
6. space : \s+
7. comment : \-\-[^\n\r]*
8. operation : [+\-\*/.=\(\)]
9. symbols : .,;



grammar cring;

program
    : consts? functions? mainProg EOF
    ;

consts
    : 'const' varDeclaration ';' ('const' varDeclaration ';')*
    ;

functions
    : 'function' varname '(' parametrList ')' block ('function' varname '(' parametrList ')' block)*
    ;

mainProg
    : 'main()' block
    ;

block
    : '{' (statement)* '}'
    ;

statement
    : varDeclaration ';'
    | callMethod ';'
    | expression ';'
    | print ';'
    | ifStatement
    | assign
    | whileStatement
    | forStatement
    ;

varDeclaration
    : type varname ('=' expression)?
    ;

callMethod
    : varname '(' expressionList ')'
    ;

print
    : 'print' '(' expressionList ')'
    ;

ifStatement
    : 'if' '(' concList ')' block ('else' block)?
    ;

assign
    : varname '=' expression
    ;

whileStatement
    : 'while' '(' concList ')' block
    ;

forStatement
    : 'for' '(' forInside ')' block
    ;

forInside
    : forInit ';' concList ';' expression
    ;

forInit
    : (varDeclaration | expression) (',' (varDeclaration | expression))*
    ;

conc
    : expression # ExpConclusin
    | callMethod # CallMethodConlusin
    | expression op = ('==' | '!=') expression # EqualsConclusion
    | expression op = ('>'  | '>=') expression # MoreThenConclusion
    | expression op = ('<'  | '<=') expression # LessThenConclusion
    ;

concList
    : conc (pob = ('and' | 'or') conc)*
    ;

parametrList
    : (varDeclaration (',' varDeclaration)*)?
    ;

expression
    : assign # AssignExpression
    | callMethod # CallMethodExpression
    | expression op = ('*' | '/' | '%') expression # MultipliesExpression
    | expression op = ('+' | '-' | '++' | '--') expression # SummExpression
    | varname # VarNameExpression
    | literal # LiteralExpression
    | '(' expression ')' # ParenExpression
    ;

expressionList
    : (expression (',' expression)*)?
    ;

literal
    : intLiteral
    | charLiteral
    | floatLiteral
    | boolLiteral
    ;

intLiteral
    : NUMBER
    ;

charLiteral
    : '\'' IDENTIFIER '\''
    ;

floatLiteral
    : NUMBER '.' NUMBER
    ;

boolLiteral
    : 'true'
    | 'false'
    ;

type
    : 'int'
    | 'char'
    | 'float'
    | 'bool'
    ;

varname
    : IDENTIFIER (IDENTIFIER | NUMBER)*
    ;

IDENTIFIER
    : [a-z | A-Z]+
    ;

NUMBER
    : [0-9] ([0-9])*
    ;

Newline
    : ( '\r' '\n'?
      | '\n'
      ) -> skip
    ;
// Пробелы и комменты
WS             : [ \t\r\n\u000C]+ -> channel(HIDDEN); //или skip
COMMENTS       : '/*' .*? '*/'    -> channel(HIDDEN);
LINE_COMM      : '//' ~[\r\n]*    -> channel(HIDDEN);